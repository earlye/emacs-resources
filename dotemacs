(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

(set-face-foreground 'minibuffer-prompt "yellow")

(setq compile-history
      '("mvn clean install"
        "make -C $WORKSPACE"
        "ace"
        "fab"
        ))
(setq compile-command "ace")

;; set up keyboard
(global-set-key (kbd "<f11>") 'ff-find-other-file)
(global-set-key (kbd "<M-RET>") 'find-file-at-point)
(global-set-key (kbd "<f12>") 'compile)
(global-set-key "\C-c\C-d" "\C-a\C- \C-n\M-w\C-y\C-p\C-p")
(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>")    'windmove-up)
(global-set-key (kbd "C-c <down>")  'windmove-down)

;; set up shell mode
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
;; doesn't work: (add-to-list ‘comint-output-filter-functions ‘ansi-color-process-output)
(add-hook 'shell-mode-hook
          (lambda () (local-set-key (kbd "<M-RET>") 'find-file-at-point)))

;; earlye extensions
(add-to-list 'load-path "~/.emacs.d/earlye")
(load "earlye")

;; php-mode
(add-to-list 'load-path "~/.emacs.d/php-mode")
(load "php-mode")

;; yaml-mode
(add-to-list 'load-path "~/.emacs.d/yaml-mode")
(load "yaml-mode")

;; markdown mode...
(add-to-list 'load-path "~/.emacs.d/markdown-mode")
(autoload 'markdown-mode "markdown-mode" "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;; javascript mode...
(setq javascript-mode-hook
  '(lambda () (progn
    (set-variable 'indent-tabs-mode nil))))

;; pbcopy support...
(if (eq system-type 'darwin)
    (
     (defun copy-from-osx ()
       (shell-command-to-string "pbpaste"))

     (defun paste-to-osx (text &optional push)
       (let ((process-connection-type nil))
	 (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
	   (process-send-string proc text)
	   (process-send-eof proc))))

     (setq interprogram-cut-function 'paste-to-osx)
     
     (setq interprogram-paste-function 'copy-from-osx)
     ))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(gud-gdb-command-name "gdb --annotate=1")
 '(large-file-warning-threshold nil)
 '(make-backup-files nil)
 '(transient-mark-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


;; (define-abbrev-table 'global-abbrev-table '(
;;                                             ("alpha" "α")
;;                                             ("beta" "β")
;;                                             ("gamma" "γ")
;;                                             ("theta" "θ")
;;                                             ("inf" "∞")

;;                                             ("ar1" "→")
;;                                             ("ar2" "⇒")
;;                                             ))
(standard-display-ascii ?\t "^I      ")

(defun term-use-sensible-escape-char (&rest ignored)
  (term-set-escape-char 24))
(advice-add 'term :after #'term-use-sensible-escape-char)

(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region compilation-filter-start (point))
  (toggle-read-only))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
